#pragma once

/** Namespace containing access functions to information
 *  of the current git repository.
 *
 *  The idea is that CMake generates these functions during pre-build
 *  so that each compiled version of a code contains information
 *  from which branch/commit/date it is.
 */
namespace git_info
{
    /** SHA1 value of the current commit
     *
     *  The used git function for this value is:
     *
     *      git describe --always --dirty --abbrev=40 --match="NoTagHasThisNaMe"
	 *
	 *  A '-dirty' will be appended, if uncommited changes are present in
	 *  the repository.
     */
    constexpr char SHA1[] = R"_git_info_(@sha1@)_git_info_";

    /** Boolean constant that is true if and only if the code was compiled with uncommited code changes
     *
     *  The value is extracted during file generation from the end of git_info::get_sha1()
     */
    constexpr bool IS_DIRTY = @is_dirty@;

    /** Name of the branch that was built
     *
     *  The used git function for this value is:
     *
     *      git rev-parse --abbrev-ref HEAD
     */
    constexpr char BRANCH[] = R"_git_info_(@branch@)_git_info_";

    /** Current commit in human readable format
     *
     *  The used git function for this value is:
     *
     *      git describe --always --dirty --tags
	 *
	 *	\note If no tags were set, a short SHA1 is the best
	 *        you can expect in terms of "human readable".
     */
    constexpr char TAG[] = R"_git_info_(@tag@)_git_info_";

    /** Date of the last commit of the branch that was built - in local time
     *
     *  The used git function for this value is:
     *
     *      git log -1 --format=%ad --date=local
     */
    constexpr char LAST_COMMIT_TIME[] = R"_git_info_(@last_commit_time@)_git_info_";

    /** Subject of the last commit of the branch that was built
     *
     *  The used git function for this value is:
     *
     *      git log -1 --format=%s
     */
    constexpr char LAST_COMMIT_SUBJECT[] = R"_git_info_(@last_commit_subject@)_git_info_";
}
